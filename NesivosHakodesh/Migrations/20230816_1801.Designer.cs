// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NesivosHakodesh.Core.DB;

namespace NesivosHakodesh.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20230816_1801")]
    partial class _20230816_1801
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.AssignmentResult", b =>
                {
                    b.Property<int>("AssignmentResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("MaamarID")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ProjectAssignmentID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("AssignmentResultID");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MaamarID");

                    b.HasIndex("ProjectAssignmentID");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("AssignmentResults");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Library", b =>
                {
                    b.Property<int>("LibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Chepter")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("Line")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SortBy")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Verse")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("LibraryId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Library");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.LibrarySection", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Section")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("LibrarySections");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Maamar", b =>
                {
                    b.Property<int>("MaamarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccuracyDescriptin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("AccuracyRate")
                        .HasColumnType("int");

                    b.Property<string>("AudioFileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("BechatzrPrinted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BechatzrPrintedWeek")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LocationDetails")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Locked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Parsha")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("PdfFileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("SourceID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int?>("TitleLibraryIdLibraryId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicID")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("WeeklyIndex")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Year")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("MaamarID");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("Date");

                    b.HasIndex("Parsha");

                    b.HasIndex("SourceID");

                    b.HasIndex("Status");

                    b.HasIndex("Title");

                    b.HasIndex("TitleLibraryIdLibraryId");

                    b.HasIndex("TopicID");

                    b.HasIndex("Type");

                    b.HasIndex("UpdatedUserId");

                    b.HasIndex("Year");

                    b.ToTable("Maamarim");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.MaamarLibraryLink", b =>
                {
                    b.Property<int>("MaamarLibraryLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LibraryId")
                        .HasColumnType("int");

                    b.Property<int?>("MaamarID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("MaamarLibraryLinkId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LibraryId");

                    b.HasIndex("MaamarID");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("MaamarLibraryLinks");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.MaamarParagraph", b =>
                {
                    b.Property<int>("MaamarParagraphID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("MaamarID")
                        .HasColumnType("int");

                    b.Property<int>("ParagraphType")
                        .HasColumnType("int");

                    b.Property<string>("Sort")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("MaamarParagraphID");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MaamarID");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("MaamarimParagraphs");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.MaamarTopic", b =>
                {
                    b.Property<int>("MaamarTopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("MaamarID")
                        .HasColumnType("int");

                    b.Property<bool>("MainTopic")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TopicID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("MaamarTopicID");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MaamarID");

                    b.HasIndex("TopicID");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("MaamarTopic");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.MaamarTorahLink", b =>
                {
                    b.Property<int>("MaamarTorahLinkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MaamarID")
                        .HasColumnType("int");

                    b.Property<int?>("TorahID")
                        .HasColumnType("int");

                    b.Property<int?>("TorahParagraphID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("MaamarTorahLinkID");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MaamarID");

                    b.HasIndex("TorahID");

                    b.HasIndex("TorahParagraphID");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("MaamarTorahLinks");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpectedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ProjectManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectID");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.ProjectAssignment", b =>
                {
                    b.Property<int>("ProjectAssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ProjectUserID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectAssignmentID");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProjectUserID");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("ProjectAssignments");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.ProjectChapter", b =>
                {
                    b.Property<int>("ProjectChapterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ParentChapterProjectChapterID")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectChapterID");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ParentChapterProjectChapterID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("ProjectChapters");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.ProjectUser", b =>
                {
                    b.Property<int>("ProjectUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectUserID");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UpdatedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUsers");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Sefer", b =>
                {
                    b.Property<int>("SeferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuthorSefer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FileUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("OutlineJson")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PrintYear")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SeferDetails")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("SeferID");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("Name");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Sefurim");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Source", b =>
                {
                    b.Property<int>("SourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssingedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SourceDetails")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SourceType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("SourceID");

                    b.HasIndex("AssingedUserId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("FirstName");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Topic", b =>
                {
                    b.Property<int>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ParentTopicTopicID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("TopicID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ParentTopicTopicID");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Torah", b =>
                {
                    b.Property<int>("TorahID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("AnnHeight")
                        .HasColumnType("double");

                    b.Property<int?>("AnnPageNumber")
                        .HasColumnType("int");

                    b.Property<double?>("AnnWidth")
                        .HasColumnType("double");

                    b.Property<double?>("AnnX")
                        .HasColumnType("double");

                    b.Property<double?>("AnnY")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Index")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MaarahMakoim")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Parsha")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int?>("SeferID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("TorahID");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("Parsha");

                    b.HasIndex("SeferID");

                    b.HasIndex("Status");

                    b.HasIndex("Title");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Torahs");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.TorahParagraph", b =>
                {
                    b.Property<int>("TorahParagraphID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SortIndex")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("TorahID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("TorahParagraphID");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("TorahID");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("TorahParagraphs");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.TorahSeferLink", b =>
                {
                    b.Property<int>("TorahSeferLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("SeferID")
                        .HasColumnType("int");

                    b.Property<int?>("TorahID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("TorahSeferLinkId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("SeferID");

                    b.HasIndex("TorahID");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("TorahSeferLinks");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Cell")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.AssignmentResult", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Maamar", "Maamar")
                        .WithMany()
                        .HasForeignKey("MaamarID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.ProjectAssignment", "ProjectAssignment")
                        .WithMany("AssignmentResults")
                        .HasForeignKey("ProjectAssignmentID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Category", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Library", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Maamar", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Library", "TitleLibraryId")
                        .WithMany()
                        .HasForeignKey("TitleLibraryIdLibraryId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.MaamarLibraryLink", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Maamar", "Maamar")
                        .WithMany("LibraryLink")
                        .HasForeignKey("MaamarID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.MaamarParagraph", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Maamar", null)
                        .WithMany("MaamarParagraphs")
                        .HasForeignKey("MaamarID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.MaamarTopic", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Maamar", "Maamar")
                        .WithMany("SubTopics")
                        .HasForeignKey("MaamarID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.MaamarTorahLink", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Maamar", "Maamar")
                        .WithMany("TorahLinks")
                        .HasForeignKey("MaamarID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Torah", "Torah")
                        .WithMany("MaamarLinks")
                        .HasForeignKey("TorahID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.TorahParagraph", "TorahParagraph")
                        .WithMany()
                        .HasForeignKey("TorahParagraphID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Project", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.ProjectAssignment", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.ProjectUser", "ProjectUser")
                        .WithMany("ProjectAssignments")
                        .HasForeignKey("ProjectUserID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.ProjectChapter", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.ProjectChapter", "ParentChapter")
                        .WithMany()
                        .HasForeignKey("ParentChapterProjectChapterID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.ProjectUser", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Sefer", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Source", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "AssingedUser")
                        .WithMany()
                        .HasForeignKey("AssingedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Topic", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.Category", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Topic", "ParentTopic")
                        .WithMany("SubTopices")
                        .HasForeignKey("ParentTopicTopicID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.Torah", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Sefer", "Sefer")
                        .WithMany("Torahs")
                        .HasForeignKey("SeferID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.TorahParagraph", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Torah", null)
                        .WithMany("TorahParagraphs")
                        .HasForeignKey("TorahID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.TorahSeferLink", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Sefer", "Sefer")
                        .WithMany()
                        .HasForeignKey("SeferID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.Torah", "Torah")
                        .WithMany("SeferLinks")
                        .HasForeignKey("TorahID");

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("NesivosHakodesh.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("NesivosHakodesh.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NesivosHakodesh.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
